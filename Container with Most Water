class Solution {
public:
    int maxArea(vector<int>& height) {
        int l =0;
        int r= height.size() -1;
        int area = 1;
        int res=0;
        while(l<r)
        {
            area = (r-l)*min(height[l],height[r]);
            res=max(res,area);
            if(height[l]<height[r])
            {
                l=l+1;
            }
            else
            {
              r=r-1;
            }
        }
    
        return res;

        
    }
};
 class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int target=0;
        sort(nums.begin(),nums.end());
        set<vector<int>> s;
        vector<vector<int>> output;
        for(int i=0;i<nums.size();i++)
        {
            int j=i+1;
            int k= nums.size() -1;
            while(j<k)
            {
                int sum = nums[i]+ nums[j]+ nums[k];
                if(sum== target)
                {
                    s.insert({nums[i], nums[j],nums[k]});
                    j++;
                    k--;
                }
                else if(sum<target)
                {
                    j++;
                }
                else
                {
                    k--;
                }
            }
        }
        for(const vector<int> & triplets: s)
        {
            output.push_back(triplets);
        }
        return output;
    }
};
